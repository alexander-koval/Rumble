<<<<<<< HEAD
#include "Classes/AppDelegate.h"
=======
#include <jni.h>
#include "AppDelegate.h"
#include "CCApplication.h"
#include "CCEGLView.h"
>>>>>>> bdb06f6d9463bcd1a691b5c763345bcfde6b6d97
#include "cocos2d.h"
#include "CCEventType.h"
#include "platform/android/jni/JniHelper.h"
#include <android/log.h>

#define  LOG_TAG    "main"
#define  LOGD(...)  __android_log_print(ANDROID_LOG_DEBUG,LOG_TAG,__VA_ARGS__)

using namespace cocos2d;

extern "C"
{
    
jint JNI_OnLoad(JavaVM *vm, void *reserved)
{
    JniHelper::setJavaVM(vm);

    return JNI_VERSION_1_4;
}

void Java_org_cocos2dx_lib_Cocos2dxRenderer_nativeInit(JNIEnv*  env, jobject thiz, jint w, jint h)
{
<<<<<<< HEAD
    if (!CCDirector::sharedDirector()->getOpenGLView())
    {
=======
    if (!CCDirector::sharedDirector()->getOpenGLView()) {
>>>>>>> bdb06f6d9463bcd1a691b5c763345bcfde6b6d97
        CCEGLView *view = CCEGLView::sharedOpenGLView();
        view->setFrameSize(w, h);
        AppDelegate *pAppDelegate = new AppDelegate();
        CCApplication::sharedApplication()->run();
<<<<<<< HEAD
    }
    else
    {
        ccGLInvalidateStateCache();
        CCShaderCache::sharedShaderCache()->reloadDefaultShaders();
=======
    } else {
    	ccGLInvalidateStateCache();
    	CCShaderCache::sharedShaderCache()->reloadDefaultShaders();
>>>>>>> bdb06f6d9463bcd1a691b5c763345bcfde6b6d97
        ccDrawInit();
        CCTextureCache::reloadAllTextures();
        CCNotificationCenter::sharedNotificationCenter()->postNotification(EVENT_COME_TO_FOREGROUND, NULL);
        CCDirector::sharedDirector()->setGLDefaultValues();
    }
}
}
